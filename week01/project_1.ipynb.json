{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project 1\n",
    "\n",
    "## Step 1: Open the `sat_scores.csv` file. Investigate the data, and answer the questions below.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1. What does the data describe?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data compares SAT scores for each state "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2. Does the data look complete? Are there any obvious issues with the observations?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data does not look complete as it does not show the total score but only the individual scores in the verbal and math sections"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3. Create a data dictionary for the dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "d = {}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Load the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4. Load the data into a list of lists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import string\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "sat_scores = pd.read_csv('/Users/Tamara/DSI-NYC-1/projects/01-projects-weekly/project-01/assets/sat_scores.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 5. Print the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   State  Rate  Verbal  Math\n",
      "0     CT    82     509   510\n",
      "1     NJ    81     499   513\n",
      "2     MA    79     511   515\n",
      "3     NY    77     495   505\n",
      "4     NH    72     520   516\n",
      "5     RI    71     501   499\n",
      "6     PA    71     500   499\n",
      "7     VT    69     511   506\n",
      "8     ME    69     506   500\n",
      "9     VA    68     510   501\n",
      "10    DE    67     501   499\n",
      "11    MD    65     508   510\n",
      "12    NC    65     493   499\n",
      "13    GA    63     491   489\n",
      "14    IN    60     499   501\n",
      "15    SC    57     486   488\n",
      "16    DC    56     482   474\n",
      "17    OR    55     526   526\n",
      "18    FL    54     498   499\n",
      "19    WA    53     527   527\n",
      "20    TX    53     493   499\n",
      "21    HI    52     485   515\n",
      "22    AK    51     514   510\n",
      "23    CA    51     498   517\n",
      "24    AZ    34     523   525\n",
      "25    NV    33     509   515\n",
      "26    CO    31     539   542\n",
      "27    OH    26     534   439\n",
      "28    MT    23     539   539\n",
      "29    WV    18     527   512\n",
      "30    ID    17     543   542\n",
      "31    TN    13     562   553\n",
      "32    NM    13     551   542\n",
      "33    IL    12     576   589\n",
      "34    KY    12     550   550\n",
      "35    WY    11     547   545\n",
      "36    MI    11     561   572\n",
      "37    MN     9     580   589\n",
      "38    KS     9     577   580\n",
      "39    AL     9     559   554\n",
      "40    NB     8     562   568\n",
      "41    OK     8     567   561\n",
      "42    MO     8     577   577\n",
      "43    LA     7     564   562\n",
      "44    WI     6     584   596\n",
      "45    AR     6     562   550\n",
      "46    UT     5     575   570\n",
      "47    IA     5     593   603\n",
      "48    SD     4     577   582\n",
      "49    ND     4     592   599\n",
      "50    MS     4     566   551\n",
      "51   All    45     506   514\n"
     ]
    }
   ],
   "source": [
    "print sat_scores"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "##### 6. Extract a list of the labels from the data, and remove them from the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  State  Rate  Verbal  Math\n",
      "0    CT    82     509   510\n",
      "1    NJ    81     499   513\n",
      "2    MA    79     511   515\n",
      "3    NY    77     495   505\n",
      "4    NH    72     520   516\n"
     ]
    }
   ],
   "source": [
    "list_of_labels = sat_scores.iloc[0:5]\n",
    "print list_of_labels\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 7. Create a list of State names extracted from the data. (Hint: use the list of labels to index on the State column)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['CT', 'NJ', 'MA', 'NY', 'NH']]\n"
     ]
    }
   ],
   "source": [
    "state_names = []\n",
    "add_state = ['CT','NJ','MA','NY','NH']\n",
    "state_names.append(add_state)\n",
    "print state_names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 8. Print the types of each column"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "type(df['State'])\n",
    "type(df['Rate'])\n",
    "type(df['Verbal'])\n",
    "type(df['Math'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 9. Do any types need to be reassigned? If so, go ahead and do it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 10. Create a dictionary for each column mapping the State to its respective value for that column. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "d = {\"CT\":[82,509,510] , \"NJ\":[81,499,513], \"MA\":[79,511,515], \"NY\":[77,495,505] , \"NH\":[72,520,516]}\n",
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 11. Create a dictionary with the values for each of the numeric columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "d ={\"Rate\":[81,82,79,77,72], \"Verbal\":[509,499,511,495,520], \"Math\":[510,513,515,505,516]}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: Describe the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 12. Print the min and max of each column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "72\n",
      "495\n",
      "505\n",
      "82\n",
      "520\n",
      "516\n"
     ]
    }
   ],
   "source": [
    "rate = [82,81,79,77,72]\n",
    "verbal = [509,499,511,495,520]\n",
    "math = [510,513,515,505,516]\n",
    "\n",
    "print np.min(rate)\n",
    "print np.min(verbal)\n",
    "print np.min(math)\n",
    "\n",
    "print np.max(rate)\n",
    "print np.max(verbal)\n",
    "print np.max(math)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 13. Write a function using only list comprehensions, no loops, to compute Standard Deviation. Print the Standard Deviation of each numeric column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.54400902933\n",
      "8.90842298053\n",
      "3.96988664826\n"
     ]
    }
   ],
   "source": [
    "rate = [82,81,79,77,72]\n",
    "verbal = [509,499,511,495,520]\n",
    "math = [510,513,515,505,516]\n",
    "\n",
    "rate_std = np.std(rate)\n",
    "print rate_std\n",
    "\n",
    "verbal_std = np.std(verbal)\n",
    "print verbal_std\n",
    "\n",
    "math_std = np.std(math)\n",
    "print math_std\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4: Visualize the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "##### 14. Using MatPlotLib and PyPlot, plot the distribution of the Rate using histograms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "First argument must be a sequence",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-76-0069d7843a2d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mrate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msat_scores\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Rate'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mstate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msat_scores\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'State'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'darkred'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/Tamara/anaconda/lib/python2.7/site-packages/matplotlib/pyplot.pyc\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, hold, data, **kwargs)\u001b[0m\n\u001b[1;32m   3249\u001b[0m                          \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3250\u001b[0m                          \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlinewidths\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverts\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverts\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3251\u001b[0;31m                          edgecolors=edgecolors, data=data, **kwargs)\n\u001b[0m\u001b[1;32m   3252\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3253\u001b[0m         \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhold\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwashold\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/Tamara/anaconda/lib/python2.7/site-packages/matplotlib/__init__.pyc\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1810\u001b[0m                     warnings.warn(msg % (label_namer, func.__name__),\n\u001b[1;32m   1811\u001b[0m                                   RuntimeWarning, stacklevel=2)\n\u001b[0;32m-> 1812\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1813\u001b[0m         \u001b[0mpre_doc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1814\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mpre_doc\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/Tamara/anaconda/lib/python2.7/site-packages/matplotlib/axes/_axes.pyc\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, **kwargs)\u001b[0m\n\u001b[1;32m   3863\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3864\u001b[0m         \u001b[0;31m# c will be unchanged unless it is the same length as x:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3865\u001b[0;31m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete_masked_points\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3866\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3867\u001b[0m         \u001b[0mscales\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ms\u001b[0m   \u001b[0;31m# Renamed for readability below.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/Tamara/anaconda/lib/python2.7/site-packages/matplotlib/cbook.pyc\u001b[0m in \u001b[0;36mdelete_masked_points\u001b[0;34m(*args)\u001b[0m\n\u001b[1;32m   1835\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1836\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mis_string_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1837\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"First argument must be a sequence\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1838\u001b[0m     \u001b[0mnrecs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1839\u001b[0m     \u001b[0mmargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: First argument must be a sequence"
     ]
    },
    {
     "data": {
      "image/png": "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\nRK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x117d7e610>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "state = ['CT','NJ','MA','NY','NH']\n",
    "rate = [82,81,79,77,72]\n",
    "verbal = [509,499,511,495,520]\n",
    "math = [510,513,515,505,516]\n",
    "\n",
    "\n",
    "\n",
    "rate = sat_scores['Rate'].values\n",
    "state = sat_scores['State'].values\n",
    "plt.scatter(state, rate, c='darkred')\n",
    "\n",
    "plt.figure(figsize = (8,12))\n",
    "plt.scatter(years_in_job, yearly_salary, c='darkred')\n",
    "plt.figure(figsize = (8,12))\n",
    "\n",
    "#I tried to run this but I guess i needed another value because matlab takes two arguments and I don't think that this\n",
    "#is the formula that I should be using. I am kinda confused with all this. Apparently I need to solve this problem first \n",
    "#before I can answer the other questions on the bottom"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 15. Plot the Math distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 16. Plot the Verbal distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 17. What is the typical assumption for data distribution?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 18. Does that distribution hold true for our data?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 19. Plot some scatterplots. **BONUS**: Use a PyPlot `figure` to present multiple plots at once."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 20. Are there any interesting relationships to note?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 21. Create box plots for each variable. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### BONUS: Using Tableau, create a heat map for each variable using a map of the US. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
